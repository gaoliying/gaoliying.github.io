<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: backend | 高立营]]></title>
  <link href="http://gaoliying.github.io/blog/categories/backend/atom.xml" rel="self"/>
  <link href="http://gaoliying.github.io/"/>
  <updated>2014-06-03T23:41:40+08:00</updated>
  <id>http://gaoliying.github.io/</id>
  <author>
    <name><![CDATA[高立营]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[在nginx服务器上访问phpmyadmin]]></title>
    <link href="http://gaoliying.github.io/blog/2014/06/03/zai-nginxfu-wu-qi-shang-fang-wen-phpmyadmin/"/>
    <updated>2014-06-03T23:04:11+08:00</updated>
    <id>http://gaoliying.github.io/blog/2014/06/03/zai-nginxfu-wu-qi-shang-fang-wen-phpmyadmin</id>
    <content type="html"><![CDATA[<h3>phpmyadmin</h3>

<p>phpmyadmin是由php脚本语言编写，作用是对mysql数据库进行可视化的管理。虽然我们可以通过系统命令行操作mysql，但命令行毕竟无法显示丰富的信息。在导入，导出大量数据的时候，phpmyadmin的优势就更明显。phpmyadmin通过网页的形式方便的实现了远程控制。</p>

<!-- more -->


<p>以前我在用apache服务器的时候，只需要运行下面两个命令，phpmyadmin就已经和apache集成好了：</p>

<div>
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install lamp-server^
</span><span class='line'>sudo apt-get install libapache2-mod-auth-mysql phpmyadmin
</span></code></pre></td></tr></table></div></figure></notextile></div>
</div>


<p>但是现在在nginx下，事情似乎不是这么简单了，因为在nginx下跑php脚本必须有fast-cgi的支持。</p>

<h3>安装＆配置</h3>

<p>首先安装php：</p>

<div>
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install php5-cli php5-cgi php5-fpm php5-mcrypt php5-mysql
</span></code></pre></td></tr></table></div></figure></notextile></div>
</div>


<p>其中php5-fpm是fast-cgi进程管理器，安装好之后必须重启一下：</p>

<div>
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/etc/init.d/php5-fpm restart
</span></code></pre></td></tr></table></div></figure></notextile></div>
</div>


<p>接着配置nginx，在/etc/nginx/conf.d目录下我已经创建了一个站点的配置文件site.conf，打开site.conf文件，添加index项，并添加对php文件的解析：</p>

<div>
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>index index.php index.html index.htm;
</span><span class='line'>
</span><span class='line'>location ~ <span class="se">\.</span>php<span class="nv">$ </span><span class="o">{</span>
</span><span class='line'>                fastcgi_split_path_info ^<span class="o">(</span>.+<span class="se">\.</span>php<span class="o">)(</span>/.+<span class="o">)</span><span class="nv">$;</span>
</span><span class='line'>        <span class="c">#       # NOTE: You should have &quot;cgi.fix_pathinfo = 0;&quot; in php.ini</span>
</span><span class='line'>        <span class="c">#</span>
</span><span class='line'>        <span class="c">#       # With php5-cgi alone:</span>
</span><span class='line'>                fastcgi_pass 127.0.0.1:9000;
</span><span class='line'>        <span class="c">#       # With php5-fpm:</span>
</span><span class='line'>        <span class="c">#       fastcgi_pass unix:/var/run/php5-fpm.sock;</span>
</span><span class='line'>                fastcgi_index index.php;
</span><span class='line'>                include fastcgi_params;
</span><span class='line'>        <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</div>


<p>输入service nginx restart重启nginx。此时在浏览器中输入site/phpmyadmin应该能出现phpmyadmin首页，但在我这里失败了。后来我输入site/phpmyadmin/index.php竟然成功了。到目前为止我还不明白问题出在哪，今后只好每次都输入index.php后缀了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在linux上安装ftp服务器]]></title>
    <link href="http://gaoliying.github.io/blog/2014/06/03/zai-linuxshang-an-zhuang-ftpfu-wu-qi/"/>
    <updated>2014-06-03T14:40:20+08:00</updated>
    <id>http://gaoliying.github.io/blog/2014/06/03/zai-linuxshang-an-zhuang-ftpfu-wu-qi</id>
    <content type="html"><![CDATA[<h3>ftp</h3>

<p>ftp是文件传输协议，用于在支持此协议的主机间传输文件。ftp使用tcp生成一个虚拟连接用于控制信息，然后再生成另一个tcp连接用于数据传输。</p>

<!-- more -->


<h3>安装</h3>

<p>敲入以下命令安装ftp：</p>

<div>
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install vsftpd
</span></code></pre></td></tr></table></div></figure></notextile></div>
</div>


<p>安装成功后，系统会生成/srv/ftp目录。这个目录是匿名用户的根目录。</p>

<h3>配置</h3>

<p>安装完成后，vsftpd的配置文件默认在/etc/vsftpd.conf，敲入：</p>

<div>
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo vi /etc/vsftpd.conf
</span></code></pre></td></tr></table></div></figure></notextile></div>
</div>


<p>配置文件当中有很详细的说明，这是非常贴心的设计，忍不住赞一个。其中有一些是默认配置，非默认配置被注释起来了。以下是我设置的一些配置项：</p>

<div>
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># 让ftp成为独立的守护线程</span>
</span><span class='line'><span class="nv">listen</span><span class="o">=</span>YES
</span><span class='line'>
</span><span class='line'><span class="c"># 允许本地用户登录</span>
</span><span class='line'><span class="nv">local_enable</span><span class="o">=</span>YES
</span><span class='line'>
</span><span class='line'><span class="c"># 允许写权限</span>
</span><span class='line'><span class="nv">write_enable</span><span class="o">=</span>YES
</span><span class='line'>
</span><span class='line'><span class="c"># umask设置为022</span>
</span><span class='line'><span class="nv">local_umask</span><span class="o">=</span>022
</span><span class='line'>
</span><span class='line'><span class="c"># 向ftp客户端发送目录信息，比如当你进入/srv/ftp时发送这个目录名称</span>
</span><span class='line'><span class="nv">dirmessage_enable</span><span class="o">=</span>YES
</span><span class='line'>
</span><span class='line'><span class="c"># 向ftp客户端发送信息时使用ftp客户端的本地时区显示时间</span>
</span><span class='line'><span class="nv">use_localtime</span><span class="o">=</span>YES
</span><span class='line'>
</span><span class='line'><span class="c"># 启动日志功能</span>
</span><span class='line'><span class="nv">xferlog_enable</span><span class="o">=</span>YES
</span><span class='line'>
</span><span class='line'><span class="c"># 日志文件地址</span>
</span><span class='line'><span class="nv">xferlog_file</span><span class="o">=</span>/var/log/vsftpd.log
</span><span class='line'>
</span><span class='line'><span class="c"># 使用20端口监听</span>
</span><span class='line'><span class="nv">connect_from_port_20</span><span class="o">=</span>YES
</span><span class='line'>
</span><span class='line'><span class="c"># 允许登录用户</span>
</span><span class='line'><span class="nv">chroot_list_enable</span><span class="o">=</span>YES
</span><span class='line'><span class="c"># 登录用户列表地址</span>
</span><span class='line'><span class="nv">chroot_list_file</span><span class="o">=</span>/etc/vsftpd.chroot_list
</span><span class='line'>
</span><span class='line'><span class="nv">secure_chroot_dir</span><span class="o">=</span>/var/run/vsftpd/empty
</span><span class='line'><span class="nv">pam_service_name</span><span class="o">=</span>vsftpd
</span><span class='line'><span class="nv">rsa_cert_file</span><span class="o">=</span>/etc/ssl/private/vsftpd.pem
</span></code></pre></td></tr></table></div></figure></notextile></div>
</div>


<p>如果ftp服务器允许匿名用户访问并具有写权限的话，写权限也就是上传权限，配置下列项：</p>

<div>
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">anonymous_enable</span><span class="o">=</span>YES
</span><span class='line'><span class="nv">anon_upload_enable</span><span class="o">=</span>YES
</span><span class='line'><span class="nv">anon_mkdir_write_enable</span><span class="o">=</span>YES
</span></code></pre></td></tr></table></div></figure></notextile></div>
</div>


<p>tips:每次修改了配置文件后记得执行service vsftpd restart使修改后的配置文件生效。</p>

<p>但是出于安全方面的考虑，不建议启动匿名访问，尤其是匿名用户的上传权限。你总不希望随便某个人都可以将他的文件上传到你的服务器上吧。于是我是关闭了匿名访问。</p>

<h3>设置登录用户</h3>

<p>匿名用户登录到ftp服务器是不需要输入用户名和密码，但登录用户需要。登录用户是我们信任的用户，所以可以开放写权限。</p>

<p>我新建了一个ftpuser用户，根目录在/srv/user/ftp，属于ftpgroup用户组。</p>

<div>
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># 创建根目录</span>
</span><span class='line'>sudo mkdir -p /srv/user/ftp
</span><span class='line'>
</span><span class='line'><span class="c"># 新建用户组</span>
</span><span class='line'>sudo groupadd ftpgroup
</span><span class='line'>
</span><span class='line'><span class="c"># 新建用户ftpuser并设置其根目录为/srv/user/ftp</span>
</span><span class='line'><span class="c"># 注：-g：用户所在的组 -d：表示创建用户自己的目录 -M：不建立默认的自己目录，也就是说在/home下没有自己的目录</span>
</span><span class='line'>sudo useradd -g ftpgroup -d /srv/user/ftp -M ftpuser
</span><span class='line'>
</span><span class='line'><span class="c"># 设置用户密码</span>
</span><span class='line'>passwd ftpuser
</span><span class='line'>
</span><span class='line'><span class="c">#编辑chroot_list文件，添加登录用户，每个用户占一行</span>
</span><span class='line'>sudo vi /etc/vsftpd.chroot_list
</span><span class='line'>ftpuser
</span><span class='line'>
</span><span class='line'><span class="c">#启动ftp服务器</span>
</span><span class='line'>service vsftpd start
</span></code></pre></td></tr></table></div></figure></notextile></div>
</div>


<p>现在用ftp客户端连接服务器，输入用户名ftpuser及密码，用户就可以登录到服务器的/srv/user/ftp目录中。用户可以下载此目录下的文件，但没有权限在此目录下新建文件，文件夹以及上传文件。回到/srv/user目录中，查看ftp目录的属性，如下所示:</p>

<div>
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>drwxr-xr-x 3 root root 4096 Jun  3 13:54 ftp/
</span></code></pre></td></tr></table></div></figure></notextile></div>
</div>


<p>你现在应该可以看出ftp目录是属于root用户，而且其他用户的权限只有r-x，缺少写权限。解决方法是在ftp目录下再新建一个upload目录，并将upload目录的权限改为drwxrwxrwx：</p>

<div>
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo mkdir -p /srv/user/ftp/upload
</span><span class='line'>chmod 777 /srv/user/ftp/upload
</span></code></pre></td></tr></table></div></figure></notextile></div>
</div>


<p>今后登录到服务器，切换到upload目录，就可以上传文件了。</p>

<p>ftp客户端推荐使用开源的FileZilla。</p>

<h3>启动／停止／重启ftp服务器</h3>

<div>
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>service vsftpd start
</span><span class='line'>service vsftpd stop
</span><span class='line'>service vsftpd restart
</span></code></pre></td></tr></table></div></figure></notextile></div>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git管理多个key]]></title>
    <link href="http://gaoliying.github.io/blog/2014/06/02/gitguan-li-duo-ge-key/"/>
    <updated>2014-06-02T10:58:29+08:00</updated>
    <id>http://gaoliying.github.io/blog/2014/06/02/gitguan-li-duo-ge-key</id>
    <content type="html"><![CDATA[<p>在github或者git.oschina.net这样子的代码托管平台上，一个账户只对应一个ssh key。当你在github上创建第二个账户或者在github上同时有个人和公司的账户的时候，在多个账户中添加同一个ssh key就会失败。解决方案是在本地计算机上生成多个key，然后创建一个config配置文件，在配置文件中指定哪个账户使用哪个私有key进行验证。</p>

<!-- more -->




<div>
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#生成key，指定唯一的文件名，比如sec_rsa，然后一路回车</span>
</span><span class='line'>gly@gly:~<span class="nv">$ </span>ssh-keygen
</span><span class='line'>Generating public/private rsa key pair.
</span><span class='line'>Enter file in which to save the key <span class="o">(</span>/home/gly/.ssh/id_rsa<span class="o">)</span>: sec_rsa
</span><span class='line'>
</span><span class='line'><span class="c">#生成config配置文件</span>
</span><span class='line'><span class="nb">cd</span> ~/.ssh
</span><span class='line'>touch config
</span><span class='line'>
</span><span class='line'><span class="c">#写config文件</span>
</span><span class='line'>vi config
</span><span class='line'>
</span><span class='line'><span class="c">#写入以下内容</span>
</span><span class='line'>Host sec
</span><span class='line'>HostName github.com
</span><span class='line'>IdentityFile ~/.ssh/sec_rsa
</span></code></pre></td></tr></table></div></figure></notextile></div>
</div>


<p>以后我们就可以用sec代替github.com进行远程克隆或提交：</p>

<div>
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#只有一个key时添加远程仓库</span>
</span><span class='line'>git remote add sec git@github.com:user/repo.git
</span><span class='line'><span class="c">#有多个key时添加远程仓库</span>
</span><span class='line'>git remote add sec git@sec:user/repo.git
</span><span class='line'>
</span><span class='line'><span class="c">#只有一个key时克隆</span>
</span><span class='line'>git clone git@github.com:user/repo.git
</span><span class='line'><span class="c">#有多个key时克隆</span>
</span><span class='line'>git clone git@sec:user/repo.git
</span></code></pre></td></tr></table></div></figure></notextile></div>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ubuntu下安装nginx服务器]]></title>
    <link href="http://gaoliying.github.io/blog/2014/06/01/ubuntuxia-an-zhuang-nginxfu-wu-qi/"/>
    <updated>2014-06-01T21:28:08+08:00</updated>
    <id>http://gaoliying.github.io/blog/2014/06/01/ubuntuxia-an-zhuang-nginxfu-wu-qi</id>
    <content type="html"><![CDATA[<h3>nginx服务器简介</h3>

<p>nginx,读音(&lsquo;engine x&rsquo;),是一款轻量级的http服务器／反向代理服务器，同时也是邮件(IMAP/POP3/SMTP)代理服务器。由俄罗斯程序工程师Igor Sysoev开发，以epoll和kqueue作为开发模型。其特点是占用内存少，高并发性能优异，能够支持高达50,000个并发连接数的响应。目前世界上大部分排名前1,000的网站采用nginx。</p>

<!-- more -->


<h3>安装nginx前的准备</h3>

<p>为了确保在nginx中能够使用正则表达式进行更灵活的配置，安装nginx之前必须确定系统已经安装了PCRE(Perl Compatible Regular Expressions)包。也可以安装openssl。</p>

<div>
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#切换到PCRE的保存路径，我把它保存在/usr/local/pcre路径下</span>
</span><span class='line'>sudo mkdir /usr/local/pcre
</span><span class='line'><span class="nb">cd</span> /usr/local/pcre
</span><span class='line'>
</span><span class='line'><span class="c">#下载最新版的PCRE</span>
</span><span class='line'>wget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.33.tar.gz
</span><span class='line'>
</span><span class='line'><span class="c">#解压</span>
</span><span class='line'>tar -zxvf pcre-8.33.tar.gz
</span><span class='line'>
</span><span class='line'><span class="c">#安装openssl</span>
</span><span class='line'>sudo apt-get install openssl
</span><span class='line'>sudo apt-get install libssl-dev
</span></code></pre></td></tr></table></div></figure></notextile></div>
</div>


<h3>安装nginx</h3>

<div>
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#切换到nginx保存路径</span>
</span><span class='line'>mkdir /usr/local/www
</span><span class='line'>mkdir /usr/local/www/nginx
</span><span class='line'><span class="nb">cd</span> /usr/local/www/nginx
</span><span class='line'>
</span><span class='line'><span class="c">#下载稳定版nginx</span>
</span><span class='line'>wget http://nginx.org/download/nginx-1.6.0.tar.gz
</span><span class='line'>
</span><span class='line'><span class="c">#解压</span>
</span><span class='line'>tar -zxvf nginx-1.6.0.tar.gz
</span><span class='line'>
</span><span class='line'><span class="c">#配置</span>
</span><span class='line'><span class="nb">cd </span>nginx-1.6.0
</span><span class='line'>./configure --prefix<span class="o">=</span>/usr/local/www/nginx --with-pcre<span class="o">=</span>/usr/local/pcre/pcre-8.33 --with-http_stub_status_module --with-http_gzip_static_module
</span><span class='line'>
</span><span class='line'><span class="c">#编译</span>
</span><span class='line'>make
</span><span class='line'>make install
</span></code></pre></td></tr></table></div></figure></notextile></div>
</div>


<p>安装完成后的提示信息：</p>

<div>
<img class="center" src="/images/2014-6/tishi.jpg" title="提示信息" >
</div>


<p>研究了一下nginx帮助后发现，有-s参数可对nginx服务进行管理：</p>

<div>
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@AY1405311210497418adZ:/usr/local/www/nginx# sbin/nginx -h
</span><span class='line'>nginx version: nginx/1.6.0
</span><span class='line'>Usage: nginx <span class="o">[</span>-?hvVtq<span class="o">]</span> <span class="o">[</span>-s signal<span class="o">]</span> <span class="o">[</span>-c filename<span class="o">]</span> <span class="o">[</span>-p prefix<span class="o">]</span> <span class="o">[</span>-g directives<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>Options:
</span><span class='line'>  -?,-h         : this <span class="nb">help</span>
</span><span class='line'>  -v            : show version and <span class="nb">exit</span>
</span><span class='line'>  -V            : show version and configure options <span class="k">then </span><span class="nb">exit</span>
</span><span class='line'>  -t            : <span class="nb">test </span>configuration and <span class="nb">exit</span>
</span><span class='line'>  -q            : suppress non-error messages during configuration testing
</span><span class='line'>  -s signal     : send signal to a master process: stop, quit, reopen, reload
</span><span class='line'>  -p prefix     : <span class="nb">set </span>prefix path <span class="o">(</span>default: /usr/local/www/nginx/<span class="o">)</span>
</span><span class='line'>  -c filename   : <span class="nb">set </span>configuration file <span class="o">(</span>default: conf/nginx.conf<span class="o">)</span>
</span><span class='line'>  -g directives : <span class="nb">set </span>global directives out of configuration file
</span></code></pre></td></tr></table></div></figure></notextile></div>
</div>


<p>因此执行以下命令对nginx重启：</p>

<div>
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@AY1405311210497418adZ:/usr/local/www/nginx# sbin/nginx -s reload
</span></code></pre></td></tr></table></div></figure></notextile></div>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python中的装饰器(decorator)语法]]></title>
    <link href="http://gaoliying.github.io/blog/2014/05/19/decorator/"/>
    <updated>2014-05-19T20:36:09+08:00</updated>
    <id>http://gaoliying.github.io/blog/2014/05/19/decorator</id>
    <content type="html"><![CDATA[<h3>什么是装饰器？</h3>

<p>装饰器是python提供的一种管理函数或类的方式。装饰器本身是可执行的对象(比如函数)，它的功能是处理其他的可执行对象。装饰器有两种：</p>

<ul>
<li>函数装饰器</li>
<li>类装饰器</li>
</ul>


<p>总之，装饰器在函数或类定义之后插入一段自动执行的代码。</p>

<!-- more -->


<h3>函数装饰器&mdash;Function Decorators</h3>

<p>执行下面两段代码片段的效果是一样的：</p>

<div>
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">decorator</span><span class="p">(</span><span class="n">f</span><span class="p">):</span>
</span><span class='line'>    <span class="c"># process f</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">f</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@decorator</span>
</span><span class='line'><span class="k">def</span> <span class="nf">func</span><span class="p">():</span> <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'><span class="n">func</span><span class="p">()</span>      <span class="c"># run func</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</div>




<div>
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">decorator</span><span class="p">(</span><span class="n">f</span><span class="p">):</span>
</span><span class='line'>    <span class="c"># process f</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">f</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">func</span><span class="p">():</span> <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'><span class="n">func</span> <span class="o">=</span> <span class="n">decorator</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>    <span class="c"># rebind func to the returned callable object</span>
</span><span class='line'>
</span><span class='line'><span class="n">func</span><span class="p">()</span>    <span class="c"># run func</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</div>


<p>当func函数接受参数时，一个更好的办法是将func的参数传入内层wrapper函数中：</p>

<div>
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">decorator</span><span class="p">(</span><span class="n">F</span><span class="p">):</span>                   <span class="c"># On @ decoration</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">wrapper</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">):</span>             <span class="c"># On wrapped function call</span>
</span><span class='line'>        <span class="c"># Use F and args</span>
</span><span class='line'>        <span class="c"># F(*args) calls original function</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">wrapper</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@decorator</span>                      <span class="c"># func = decorator(func)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">func</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>                 <span class="c"># func is passed to decorator&#39;s F</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>
</span><span class='line'><span class="n">func</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">)</span>                      <span class="c"># 6, 7 are passed to wrapper&#39;s *args</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</div>


<p>当装饰器本身接受一些参数时，我们可以在装饰器函数内再增加一个wrapper来接受这些参数：</p>

<div>
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">decorator</span><span class="p">(</span><span class="n">var</span><span class="p">):</span>                     <span class="c"># On @ decoration</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">wrapper</span><span class="p">(</span><span class="n">f</span><span class="p">):</span>
</span><span class='line'>        <span class="k">def</span> <span class="nf">inner_wrapper</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">):</span>           <span class="c"># On wrapped function call</span>
</span><span class='line'>            <span class="c"># Use var and args</span>
</span><span class='line'>            <span class="c"># F(*args) calls original function</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">inner_wrapper</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">wrapper</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@decorator</span><span class="p">(</span><span class="s">&#39;foo&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">func</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>                 <span class="c"># func is passed to decorator&#39;s F</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>
</span><span class='line'><span class="n">func</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">)</span>                      <span class="c"># 6, 7 are passed to inner_wrapper&#39;s *args</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</div>


<h3>应用多个装饰器</h3>

<p>多个装饰器可以同时嵌套地处理一个函数：</p>

<div>
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nd">@A</span>
</span><span class='line'><span class="nd">@B</span>
</span><span class='line'><span class="nd">@C</span>
</span><span class='line'><span class="k">def</span> <span class="nf">f</span><span class="p">():</span> <span class="k">pass</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</div>


<p>效果等同于下面的代码：</p>

<div>
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">f</span><span class="p">():</span> <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'><span class="n">f</span> <span class="o">=</span> <span class="n">A</span><span class="p">(</span><span class="n">B</span><span class="p">(</span><span class="n">C</span><span class="p">(</span><span class="n">f</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</div>


<p>参考链接：<a href="http://www.cnblogs.com/Jerry-Chou/archive/2012/05/23/2515004.html">http://www.cnblogs.com/Jerry-Chou/archive/2012/05/23/2515004.html</a></p>
]]></content>
  </entry>
  
</feed>
