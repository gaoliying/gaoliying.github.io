<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[高立营]]></title>
  <link href="http://gaoliying.github.io/atom.xml" rel="self"/>
  <link href="http://gaoliying.github.io/"/>
  <updated>2014-06-03T23:41:40+08:00</updated>
  <id>http://gaoliying.github.io/</id>
  <author>
    <name><![CDATA[高立营]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[在nginx服务器上访问phpmyadmin]]></title>
    <link href="http://gaoliying.github.io/blog/2014/06/03/zai-nginxfu-wu-qi-shang-fang-wen-phpmyadmin/"/>
    <updated>2014-06-03T23:04:11+08:00</updated>
    <id>http://gaoliying.github.io/blog/2014/06/03/zai-nginxfu-wu-qi-shang-fang-wen-phpmyadmin</id>
    <content type="html"><![CDATA[<h3>phpmyadmin</h3>

<p>phpmyadmin是由php脚本语言编写，作用是对mysql数据库进行可视化的管理。虽然我们可以通过系统命令行操作mysql，但命令行毕竟无法显示丰富的信息。在导入，导出大量数据的时候，phpmyadmin的优势就更明显。phpmyadmin通过网页的形式方便的实现了远程控制。</p>

<!-- more -->


<p>以前我在用apache服务器的时候，只需要运行下面两个命令，phpmyadmin就已经和apache集成好了：</p>

<div>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install lamp-server^
</span><span class='line'>sudo apt-get install libapache2-mod-auth-mysql phpmyadmin
</span></code></pre></td></tr></table></div></figure>

</div>


<p>但是现在在nginx下，事情似乎不是这么简单了，因为在nginx下跑php脚本必须有fast-cgi的支持。</p>

<h3>安装＆配置</h3>

<p>首先安装php：</p>

<div>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install php5-cli php5-cgi php5-fpm php5-mcrypt php5-mysql
</span></code></pre></td></tr></table></div></figure>

</div>


<p>其中php5-fpm是fast-cgi进程管理器，安装好之后必须重启一下：</p>

<div>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/etc/init.d/php5-fpm restart
</span></code></pre></td></tr></table></div></figure>

</div>


<p>接着配置nginx，在/etc/nginx/conf.d目录下我已经创建了一个站点的配置文件site.conf，打开site.conf文件，添加index项，并添加对php文件的解析：</p>

<div>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>index index.php index.html index.htm;
</span><span class='line'>
</span><span class='line'>location ~ <span class="se">\.</span>php<span class="nv">$ </span><span class="o">{</span>
</span><span class='line'>                fastcgi_split_path_info ^<span class="o">(</span>.+<span class="se">\.</span>php<span class="o">)(</span>/.+<span class="o">)</span><span class="nv">$;</span>
</span><span class='line'>        <span class="c">#       # NOTE: You should have &quot;cgi.fix_pathinfo = 0;&quot; in php.ini</span>
</span><span class='line'>        <span class="c">#</span>
</span><span class='line'>        <span class="c">#       # With php5-cgi alone:</span>
</span><span class='line'>                fastcgi_pass 127.0.0.1:9000;
</span><span class='line'>        <span class="c">#       # With php5-fpm:</span>
</span><span class='line'>        <span class="c">#       fastcgi_pass unix:/var/run/php5-fpm.sock;</span>
</span><span class='line'>                fastcgi_index index.php;
</span><span class='line'>                include fastcgi_params;
</span><span class='line'>        <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

</div>


<p>输入service nginx restart重启nginx。此时在浏览器中输入site/phpmyadmin应该能出现phpmyadmin首页，但在我这里失败了。后来我输入site/phpmyadmin/index.php竟然成功了。到目前为止我还不明白问题出在哪，今后只好每次都输入index.php后缀了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在linux上安装ftp服务器]]></title>
    <link href="http://gaoliying.github.io/blog/2014/06/03/zai-linuxshang-an-zhuang-ftpfu-wu-qi/"/>
    <updated>2014-06-03T14:40:20+08:00</updated>
    <id>http://gaoliying.github.io/blog/2014/06/03/zai-linuxshang-an-zhuang-ftpfu-wu-qi</id>
    <content type="html"><![CDATA[<h3>ftp</h3>

<p>ftp是文件传输协议，用于在支持此协议的主机间传输文件。ftp使用tcp生成一个虚拟连接用于控制信息，然后再生成另一个tcp连接用于数据传输。</p>

<!-- more -->


<h3>安装</h3>

<p>敲入以下命令安装ftp：</p>

<div>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install vsftpd
</span></code></pre></td></tr></table></div></figure>

</div>


<p>安装成功后，系统会生成/srv/ftp目录。这个目录是匿名用户的根目录。</p>

<h3>配置</h3>

<p>安装完成后，vsftpd的配置文件默认在/etc/vsftpd.conf，敲入：</p>

<div>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo vi /etc/vsftpd.conf
</span></code></pre></td></tr></table></div></figure>

</div>


<p>配置文件当中有很详细的说明，这是非常贴心的设计，忍不住赞一个。其中有一些是默认配置，非默认配置被注释起来了。以下是我设置的一些配置项：</p>

<div>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># 让ftp成为独立的守护线程</span>
</span><span class='line'><span class="nv">listen</span><span class="o">=</span>YES
</span><span class='line'>
</span><span class='line'><span class="c"># 允许本地用户登录</span>
</span><span class='line'><span class="nv">local_enable</span><span class="o">=</span>YES
</span><span class='line'>
</span><span class='line'><span class="c"># 允许写权限</span>
</span><span class='line'><span class="nv">write_enable</span><span class="o">=</span>YES
</span><span class='line'>
</span><span class='line'><span class="c"># umask设置为022</span>
</span><span class='line'><span class="nv">local_umask</span><span class="o">=</span>022
</span><span class='line'>
</span><span class='line'><span class="c"># 向ftp客户端发送目录信息，比如当你进入/srv/ftp时发送这个目录名称</span>
</span><span class='line'><span class="nv">dirmessage_enable</span><span class="o">=</span>YES
</span><span class='line'>
</span><span class='line'><span class="c"># 向ftp客户端发送信息时使用ftp客户端的本地时区显示时间</span>
</span><span class='line'><span class="nv">use_localtime</span><span class="o">=</span>YES
</span><span class='line'>
</span><span class='line'><span class="c"># 启动日志功能</span>
</span><span class='line'><span class="nv">xferlog_enable</span><span class="o">=</span>YES
</span><span class='line'>
</span><span class='line'><span class="c"># 日志文件地址</span>
</span><span class='line'><span class="nv">xferlog_file</span><span class="o">=</span>/var/log/vsftpd.log
</span><span class='line'>
</span><span class='line'><span class="c"># 使用20端口监听</span>
</span><span class='line'><span class="nv">connect_from_port_20</span><span class="o">=</span>YES
</span><span class='line'>
</span><span class='line'><span class="c"># 允许登录用户</span>
</span><span class='line'><span class="nv">chroot_list_enable</span><span class="o">=</span>YES
</span><span class='line'><span class="c"># 登录用户列表地址</span>
</span><span class='line'><span class="nv">chroot_list_file</span><span class="o">=</span>/etc/vsftpd.chroot_list
</span><span class='line'>
</span><span class='line'><span class="nv">secure_chroot_dir</span><span class="o">=</span>/var/run/vsftpd/empty
</span><span class='line'><span class="nv">pam_service_name</span><span class="o">=</span>vsftpd
</span><span class='line'><span class="nv">rsa_cert_file</span><span class="o">=</span>/etc/ssl/private/vsftpd.pem
</span></code></pre></td></tr></table></div></figure>

</div>


<p>如果ftp服务器允许匿名用户访问并具有写权限的话，写权限也就是上传权限，配置下列项：</p>

<div>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">anonymous_enable</span><span class="o">=</span>YES
</span><span class='line'><span class="nv">anon_upload_enable</span><span class="o">=</span>YES
</span><span class='line'><span class="nv">anon_mkdir_write_enable</span><span class="o">=</span>YES
</span></code></pre></td></tr></table></div></figure>

</div>


<p>tips:每次修改了配置文件后记得执行service vsftpd restart使修改后的配置文件生效。</p>

<p>但是出于安全方面的考虑，不建议启动匿名访问，尤其是匿名用户的上传权限。你总不希望随便某个人都可以将他的文件上传到你的服务器上吧。于是我是关闭了匿名访问。</p>

<h3>设置登录用户</h3>

<p>匿名用户登录到ftp服务器是不需要输入用户名和密码，但登录用户需要。登录用户是我们信任的用户，所以可以开放写权限。</p>

<p>我新建了一个ftpuser用户，根目录在/srv/user/ftp，属于ftpgroup用户组。</p>

<div>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># 创建根目录</span>
</span><span class='line'>sudo mkdir -p /srv/user/ftp
</span><span class='line'>
</span><span class='line'><span class="c"># 新建用户组</span>
</span><span class='line'>sudo groupadd ftpgroup
</span><span class='line'>
</span><span class='line'><span class="c"># 新建用户ftpuser并设置其根目录为/srv/user/ftp</span>
</span><span class='line'><span class="c"># 注：-g：用户所在的组 -d：表示创建用户自己的目录 -M：不建立默认的自己目录，也就是说在/home下没有自己的目录</span>
</span><span class='line'>sudo useradd -g ftpgroup -d /srv/user/ftp -M ftpuser
</span><span class='line'>
</span><span class='line'><span class="c"># 设置用户密码</span>
</span><span class='line'>passwd ftpuser
</span><span class='line'>
</span><span class='line'><span class="c">#编辑chroot_list文件，添加登录用户，每个用户占一行</span>
</span><span class='line'>sudo vi /etc/vsftpd.chroot_list
</span><span class='line'>ftpuser
</span><span class='line'>
</span><span class='line'><span class="c">#启动ftp服务器</span>
</span><span class='line'>service vsftpd start
</span></code></pre></td></tr></table></div></figure>

</div>


<p>现在用ftp客户端连接服务器，输入用户名ftpuser及密码，用户就可以登录到服务器的/srv/user/ftp目录中。用户可以下载此目录下的文件，但没有权限在此目录下新建文件，文件夹以及上传文件。回到/srv/user目录中，查看ftp目录的属性，如下所示:</p>

<div>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>drwxr-xr-x 3 root root 4096 Jun  3 13:54 ftp/
</span></code></pre></td></tr></table></div></figure>

</div>


<p>你现在应该可以看出ftp目录是属于root用户，而且其他用户的权限只有r-x，缺少写权限。解决方法是在ftp目录下再新建一个upload目录，并将upload目录的权限改为drwxrwxrwx：</p>

<div>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo mkdir -p /srv/user/ftp/upload
</span><span class='line'>chmod 777 /srv/user/ftp/upload
</span></code></pre></td></tr></table></div></figure>

</div>


<p>今后登录到服务器，切换到upload目录，就可以上传文件了。</p>

<p>ftp客户端推荐使用开源的FileZilla。</p>

<h3>启动／停止／重启ftp服务器</h3>

<div>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>service vsftpd start
</span><span class='line'>service vsftpd stop
</span><span class='line'>service vsftpd restart
</span></code></pre></td></tr></table></div></figure>

</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git管理多个key]]></title>
    <link href="http://gaoliying.github.io/blog/2014/06/02/gitguan-li-duo-ge-key/"/>
    <updated>2014-06-02T10:58:29+08:00</updated>
    <id>http://gaoliying.github.io/blog/2014/06/02/gitguan-li-duo-ge-key</id>
    <content type="html"><![CDATA[<p>在github或者git.oschina.net这样子的代码托管平台上，一个账户只对应一个ssh key。当你在github上创建第二个账户或者在github上同时有个人和公司的账户的时候，在多个账户中添加同一个ssh key就会失败。解决方案是在本地计算机上生成多个key，然后创建一个config配置文件，在配置文件中指定哪个账户使用哪个私有key进行验证。</p>

<!-- more -->




<div>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#生成key，指定唯一的文件名，比如sec_rsa，然后一路回车</span>
</span><span class='line'>gly@gly:~<span class="nv">$ </span>ssh-keygen
</span><span class='line'>Generating public/private rsa key pair.
</span><span class='line'>Enter file in which to save the key <span class="o">(</span>/home/gly/.ssh/id_rsa<span class="o">)</span>: sec_rsa
</span><span class='line'>
</span><span class='line'><span class="c">#生成config配置文件</span>
</span><span class='line'><span class="nb">cd</span> ~/.ssh
</span><span class='line'>touch config
</span><span class='line'>
</span><span class='line'><span class="c">#写config文件</span>
</span><span class='line'>vi config
</span><span class='line'>
</span><span class='line'><span class="c">#写入以下内容</span>
</span><span class='line'>Host sec
</span><span class='line'>HostName github.com
</span><span class='line'>IdentityFile ~/.ssh/sec_rsa
</span></code></pre></td></tr></table></div></figure>

</div>


<p>以后我们就可以用sec代替github.com进行远程克隆或提交：</p>

<div>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#只有一个key时添加远程仓库</span>
</span><span class='line'>git remote add sec git@github.com:user/repo.git
</span><span class='line'><span class="c">#有多个key时添加远程仓库</span>
</span><span class='line'>git remote add sec git@sec:user/repo.git
</span><span class='line'>
</span><span class='line'><span class="c">#只有一个key时克隆</span>
</span><span class='line'>git clone git@github.com:user/repo.git
</span><span class='line'><span class="c">#有多个key时克隆</span>
</span><span class='line'>git clone git@sec:user/repo.git
</span></code></pre></td></tr></table></div></figure>

</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ubuntu下安装nginx服务器]]></title>
    <link href="http://gaoliying.github.io/blog/2014/06/01/ubuntuxia-an-zhuang-nginxfu-wu-qi/"/>
    <updated>2014-06-01T21:28:08+08:00</updated>
    <id>http://gaoliying.github.io/blog/2014/06/01/ubuntuxia-an-zhuang-nginxfu-wu-qi</id>
    <content type="html"><![CDATA[<h3>nginx服务器简介</h3>

<p>nginx,读音(&lsquo;engine x&rsquo;),是一款轻量级的http服务器／反向代理服务器，同时也是邮件(IMAP/POP3/SMTP)代理服务器。由俄罗斯程序工程师Igor Sysoev开发，以epoll和kqueue作为开发模型。其特点是占用内存少，高并发性能优异，能够支持高达50,000个并发连接数的响应。目前世界上大部分排名前1,000的网站采用nginx。</p>

<!-- more -->


<h3>安装nginx前的准备</h3>

<p>为了确保在nginx中能够使用正则表达式进行更灵活的配置，安装nginx之前必须确定系统已经安装了PCRE(Perl Compatible Regular Expressions)包。也可以安装openssl。</p>

<div>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#切换到PCRE的保存路径，我把它保存在/usr/local/pcre路径下</span>
</span><span class='line'>sudo mkdir /usr/local/pcre
</span><span class='line'><span class="nb">cd</span> /usr/local/pcre
</span><span class='line'>
</span><span class='line'><span class="c">#下载最新版的PCRE</span>
</span><span class='line'>wget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.33.tar.gz
</span><span class='line'>
</span><span class='line'><span class="c">#解压</span>
</span><span class='line'>tar -zxvf pcre-8.33.tar.gz
</span><span class='line'>
</span><span class='line'><span class="c">#安装openssl</span>
</span><span class='line'>sudo apt-get install openssl
</span><span class='line'>sudo apt-get install libssl-dev
</span></code></pre></td></tr></table></div></figure>

</div>


<h3>安装nginx</h3>

<div>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#切换到nginx保存路径</span>
</span><span class='line'>mkdir /usr/local/www
</span><span class='line'>mkdir /usr/local/www/nginx
</span><span class='line'><span class="nb">cd</span> /usr/local/www/nginx
</span><span class='line'>
</span><span class='line'><span class="c">#下载稳定版nginx</span>
</span><span class='line'>wget http://nginx.org/download/nginx-1.6.0.tar.gz
</span><span class='line'>
</span><span class='line'><span class="c">#解压</span>
</span><span class='line'>tar -zxvf nginx-1.6.0.tar.gz
</span><span class='line'>
</span><span class='line'><span class="c">#配置</span>
</span><span class='line'><span class="nb">cd </span>nginx-1.6.0
</span><span class='line'>./configure --prefix<span class="o">=</span>/usr/local/www/nginx --with-pcre<span class="o">=</span>/usr/local/pcre/pcre-8.33 --with-http_stub_status_module --with-http_gzip_static_module
</span><span class='line'>
</span><span class='line'><span class="c">#编译</span>
</span><span class='line'>make
</span><span class='line'>make install
</span></code></pre></td></tr></table></div></figure>

</div>


<p>安装完成后的提示信息：</p>

<div>
<img class="center" src="http://gaoliying.github.io/images/2014-6/tishi.jpg" title="提示信息" >
</div>


<p>研究了一下nginx帮助后发现，有-s参数可对nginx服务进行管理：</p>

<div>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@AY1405311210497418adZ:/usr/local/www/nginx# sbin/nginx -h
</span><span class='line'>nginx version: nginx/1.6.0
</span><span class='line'>Usage: nginx <span class="o">[</span>-?hvVtq<span class="o">]</span> <span class="o">[</span>-s signal<span class="o">]</span> <span class="o">[</span>-c filename<span class="o">]</span> <span class="o">[</span>-p prefix<span class="o">]</span> <span class="o">[</span>-g directives<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>Options:
</span><span class='line'>  -?,-h         : this <span class="nb">help</span>
</span><span class='line'>  -v            : show version and <span class="nb">exit</span>
</span><span class='line'>  -V            : show version and configure options <span class="k">then </span><span class="nb">exit</span>
</span><span class='line'>  -t            : <span class="nb">test </span>configuration and <span class="nb">exit</span>
</span><span class='line'>  -q            : suppress non-error messages during configuration testing
</span><span class='line'>  -s signal     : send signal to a master process: stop, quit, reopen, reload
</span><span class='line'>  -p prefix     : <span class="nb">set </span>prefix path <span class="o">(</span>default: /usr/local/www/nginx/<span class="o">)</span>
</span><span class='line'>  -c filename   : <span class="nb">set </span>configuration file <span class="o">(</span>default: conf/nginx.conf<span class="o">)</span>
</span><span class='line'>  -g directives : <span class="nb">set </span>global directives out of configuration file
</span></code></pre></td></tr></table></div></figure>

</div>


<p>因此执行以下命令对nginx重启：</p>

<div>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@AY1405311210497418adZ:/usr/local/www/nginx# sbin/nginx -s reload
</span></code></pre></td></tr></table></div></figure>

</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python中的装饰器(decorator)语法]]></title>
    <link href="http://gaoliying.github.io/blog/2014/05/19/decorator/"/>
    <updated>2014-05-19T20:36:09+08:00</updated>
    <id>http://gaoliying.github.io/blog/2014/05/19/decorator</id>
    <content type="html"><![CDATA[<h3>什么是装饰器？</h3>

<p>装饰器是python提供的一种管理函数或类的方式。装饰器本身是可执行的对象(比如函数)，它的功能是处理其他的可执行对象。装饰器有两种：</p>

<ul>
<li>函数装饰器</li>
<li>类装饰器</li>
</ul>


<p>总之，装饰器在函数或类定义之后插入一段自动执行的代码。</p>

<!-- more -->


<h3>函数装饰器&mdash;Function Decorators</h3>

<p>执行下面两段代码片段的效果是一样的：</p>

<div>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">decorator</span><span class="p">(</span><span class="n">f</span><span class="p">):</span>
</span><span class='line'>    <span class="c"># process f</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">f</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@decorator</span>
</span><span class='line'><span class="k">def</span> <span class="nf">func</span><span class="p">():</span> <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'><span class="n">func</span><span class="p">()</span>      <span class="c"># run func</span>
</span></code></pre></td></tr></table></div></figure>

</div>




<div>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">decorator</span><span class="p">(</span><span class="n">f</span><span class="p">):</span>
</span><span class='line'>    <span class="c"># process f</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">f</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">func</span><span class="p">():</span> <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'><span class="n">func</span> <span class="o">=</span> <span class="n">decorator</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>    <span class="c"># rebind func to the returned callable object</span>
</span><span class='line'>
</span><span class='line'><span class="n">func</span><span class="p">()</span>    <span class="c"># run func</span>
</span></code></pre></td></tr></table></div></figure>

</div>


<p>当func函数接受参数时，一个更好的办法是将func的参数传入内层wrapper函数中：</p>

<div>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">decorator</span><span class="p">(</span><span class="n">F</span><span class="p">):</span>                      <span class="c"># On @ decoration</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">wrapper</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">):</span>                <span class="c"># On wrapped function call</span>
</span><span class='line'>        <span class="c"># Use F and args</span>
</span><span class='line'>        <span class="c"># F(*args) calls original function</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">wrapper</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@decorator</span>                        <span class="c"># func = decorator(func)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">func</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>                 <span class="c"># func is passed to decorator&#39;s F</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>
</span><span class='line'><span class="n">func</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">)</span>                    <span class="c"># 6, 7 are passed to wrapper&#39;s *args</span>
</span></code></pre></td></tr></table></div></figure>

</div>


<p>当装饰器本身接受一些参数时，我们可以在装饰器函数内再增加一个wrapper来接受这些参数：</p>

<div>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">decorator</span><span class="p">(</span><span class="n">var</span><span class="p">):</span>                    <span class="c"># On @ decoration</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">wrapper</span><span class="p">(</span><span class="n">f</span><span class="p">):</span>
</span><span class='line'>        <span class="k">def</span> <span class="nf">inner_wrapper</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">):</span>          <span class="c"># On wrapped function call</span>
</span><span class='line'>            <span class="c"># Use var and args</span>
</span><span class='line'>            <span class="c"># F(*args) calls original function</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">inner_wrapper</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">wrapper</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@decorator</span><span class="p">(</span><span class="s">&#39;foo&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">func</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>                 <span class="c"># func is passed to decorator&#39;s F</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>
</span><span class='line'><span class="n">func</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">)</span>                    <span class="c"># 6, 7 are passed to inner_wrapper&#39;s *args</span>
</span></code></pre></td></tr></table></div></figure>

</div>


<h3>应用多个装饰器</h3>

<p>多个装饰器可以同时嵌套地处理一个函数：</p>

<div>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nd">@A</span>
</span><span class='line'><span class="nd">@B</span>
</span><span class='line'><span class="nd">@C</span>
</span><span class='line'><span class="k">def</span> <span class="nf">f</span><span class="p">():</span> <span class="k">pass</span>
</span></code></pre></td></tr></table></div></figure>

</div>


<p>效果等同于下面的代码：</p>

<div>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">f</span><span class="p">():</span> <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'><span class="n">f</span> <span class="o">=</span> <span class="n">A</span><span class="p">(</span><span class="n">B</span><span class="p">(</span><span class="n">C</span><span class="p">(</span><span class="n">f</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>

</div>


<p>参考链接：<a href="http://www.cnblogs.com/Jerry-Chou/archive/2012/05/23/2515004.html">http://www.cnblogs.com/Jerry-Chou/archive/2012/05/23/2515004.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python中with语句的用法]]></title>
    <link href="http://gaoliying.github.io/blog/2014/05/18/with/"/>
    <updated>2014-05-18T21:00:53+08:00</updated>
    <id>http://gaoliying.github.io/blog/2014/05/18/with</id>
    <content type="html"><![CDATA[<p>with语句在python2.5中引入，可以非常方便地处理两个相关的操作，with语句块在这两个操作中间执行。其典型的应用是打开文件，操作文件，然后关闭文件。</p>

<div>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;output.txt&#39;</span><span class="p">,</span> <span class="s">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span><span class='line'>    <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&#39;Hi there!&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

</div>


<p>上述with语句会在嵌套的代码执行完后自动关闭文件。当with语句块中抛出异常时，在这个异常被外层处理器捕获之前，文件会被关闭。当嵌套的with语句中执行到return，continue，break等语句时，文件也会被关闭。</p>

<!-- more -->


<p>下面列举另一个例子。pycairo是python的图形库。其Context类提供save()方法，用来将当前的绘图状态压入栈中，以及一个restore()方法用来从栈顶恢复前一个绘图状态。这两个函数一般成对地调用。</p>

<p>以下代码用一个Context对象来画六个长方形，每个长方形旋转了不同的角度。每当调用rotate时实际上结合了当前的变换。因此在循环的每一次迭代时我们用一对save和restore来保存绘图状态。这样就避免了旋转操作结合上一次旋转。</p>

<div>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">cr</span><span class="o">.</span><span class="n">translate</span><span class="p">(</span><span class="mi">68</span><span class="p">,</span> <span class="mi">68</span><span class="p">)</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">6</span><span class="p">):</span>
</span><span class='line'>    <span class="n">cr</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>
</span><span class='line'>    <span class="n">cr</span><span class="o">.</span><span class="n">rotate</span><span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">math</span><span class="o">.</span><span class="n">pi</span> <span class="o">*</span> <span class="n">i</span> <span class="o">/</span> <span class="mi">6</span><span class="p">)</span>
</span><span class='line'>    <span class="n">cr</span><span class="o">.</span><span class="n">rectangle</span><span class="p">(</span><span class="o">-</span><span class="mi">25</span><span class="p">,</span> <span class="o">-</span><span class="mi">60</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">40</span><span class="p">)</span>
</span><span class='line'>    <span class="n">cr</span><span class="o">.</span><span class="n">stroke</span><span class="p">()</span>
</span><span class='line'>    <span class="n">cr</span><span class="o">.</span><span class="n">restore</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>

</div>




<div>
<img class="center" src="http://gaoliying.github.io/images/2014-5/six-rectangles.png" title="'六个矩形'" >
</div>


<p>这是一个非常简单的例子，但是对于大型程序来说每次跟踪哪个save和哪个restore配对是很麻烦的。with语句可以使这种代码变得简介一些。</p>

<p>pycairo不支持with，所以我们必须自己编程实现它。有两种办法来实现：</p>

<ul>
<li>实现一个context manager类</li>
<li>写一个生成器函数</li>
</ul>


<h3>实现一个context manager类</h3>

<p>我们现在定义一个包含<strong>enter</strong>和<strong>exit</strong>方法的类：</p>

<div>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Saved</span><span class="p">():</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot; Saved可以被认为是context manager &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">cr</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">cr</span> <span class="o">=</span> <span class="n">cr</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__enter__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">cr</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">cr</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__exit__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="nb">type</span><span class="p">,</span> <span class="n">value</span><span class="p">,</span> <span class="n">traceback</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">cr</span><span class="o">.</span><span class="n">restore</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>

</div>




<div>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">cr</span><span class="o">.</span><span class="n">translate</span><span class="p">(</span><span class="mi">68</span><span class="p">,</span> <span class="mi">68</span><span class="p">)</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">6</span><span class="p">):</span>
</span><span class='line'>    <span class="k">with</span> <span class="n">Saved</span><span class="p">(</span><span class="n">cr</span><span class="p">):</span>
</span><span class='line'>        <span class="n">cr</span><span class="o">.</span><span class="n">rotate</span><span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">math</span><span class="o">.</span><span class="n">pi</span> <span class="o">*</span> <span class="n">i</span> <span class="o">/</span> <span class="mi">6</span><span class="p">)</span>
</span><span class='line'>        <span class="n">cr</span><span class="o">.</span><span class="n">rectangle</span><span class="p">(</span><span class="o">-</span><span class="mi">25</span><span class="p">,</span> <span class="o">-</span><span class="mi">60</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">40</span><span class="p">)</span>
</span><span class='line'>        <span class="n">cr</span><span class="o">.</span><span class="n">stroke</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>

</div>


<p>下面是python解释器执行with时的详细步骤：</p>

<ol>
<li>with语句将Saved对象保存在临时的，隐藏的变量中，或赋给as之后的变量；</li>
<li>with语句调用Saved对象的<strong>enter</strong>方法，使context manager工作；</li>
<li><strong>enter</strong>方法调用在cairo的context中调用save；</li>
<li><strong>enter</strong>方法返回cairo context，但是我们还没有指定“as”变量，所以不保存返回的值；</li>
<li>嵌套语句快执行；</li>
<li>在嵌套语句块的结尾，with语句调用Saved对象的<strong>exit</strong>方法，传入(None, None, None)代表没有异常发生；</li>
<li><strong>exit</strong>方法在cairo context上调用restore。</li>
</ol>


<h3>异常处理</h3>

<p>当with中嵌套的语句抛出异常时，比如我们传递错误的参数给rectangle方法，python解释器处理异常的步骤如下：</p>

<ol>
<li>rectangle方法抛出一个TypeError异常；</li>
<li>with语句捕获这个异常；</li>
<li>with语句调用Saved对象上的<strong>exit</strong>方法，传递关于异常的三个参数：(type, value, traceback)&mdash;当你调用sys.exc_info时会得到相同的值。这将告诉<strong>exit</strong>方法所有的信息。</li>
<li>在这种情况下，<strong>exit</strong>方法在cairo context上调用restore，然后返回None。（在python中，当没有return语句时总是返回None）；</li>
<li>with语句检查返回值是否是True，因为不是，所以with语句重新抛出TypeError异常，外层函数可能处理这个异常。</li>
</ol>


<p>这样，不管异常发生与否，我们都能保证restore永远会在cairo context上被调用。</p>

<h3>以生成器来实现Context manager</h3>

<p>下面是并不完整的生成器函数，因为它不能很好地处理异常：</p>

<div>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">contextlib</span> <span class="kn">import</span> <span class="n">contextmanager</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@contextmanager</span>
</span><span class='line'><span class="k">def</span> <span class="nf">saved</span><span class="p">(</span><span class="n">cr</span><span class="p">):</span>
</span><span class='line'>    <span class="n">cr</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>
</span><span class='line'>    <span class="k">yield</span> <span class="n">cr</span>
</span><span class='line'>    <span class="n">cr</span><span class="o">.</span><span class="n">restore</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>

</div>


<p>生成器看似比之前那个方法简单一些。但是这个方法要执行更多的步骤。想要完全理解它，除了对面向对象编程要熟悉之外，还必须对python装饰器，生成器，迭代器和返回函数的函数非常熟悉。</p>

<p>这种方法需要contextlib库中的两个对象：</p>

<ol>
<li>contextmanager函数；</li>
<li>GeneratorContextManager类。</li>
</ol>


<p>现在我简单写一些我对contextlib.py的理解。我们从生成器开始讲起，下面是代码执行的步骤：</p>

<ol>
<li>python解释器能够识别yield表达式。因此def不是声明一个通常的函数，而是创建了一个生成器函数；</li>
<li>因为def有@contextmanager装饰器，所以contextmanager以生成器函数为参数被调用；</li>
<li>contextmanager函数返回一个工厂函数。这个工厂函数创建一个GeneratorContextManager对象；</li>
<li>最后工厂函数被赋给saved。从此开始我们每次调用saved其实是调用这个工厂函数。</li>
</ol>


<p>现在我们可以这样调用saved：</p>

<div>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">6</span><span class="p">):</span>
</span><span class='line'>    <span class="k">with</span> <span class="n">saved</span><span class="p">(</span><span class="n">cr</span><span class="p">):</span>
</span><span class='line'>        <span class="n">cr</span><span class="o">.</span><span class="n">rotate</span><span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">math</span><span class="o">.</span><span class="n">pi</span> <span class="o">*</span> <span class="n">i</span> <span class="o">/</span> <span class="mi">6</span><span class="p">)</span>
</span><span class='line'>        <span class="n">cr</span><span class="o">.</span><span class="n">rectangle</span><span class="p">(</span><span class="o">-</span><span class="mi">25</span><span class="p">,</span> <span class="o">-</span><span class="mi">60</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">40</span><span class="p">)</span>
</span><span class='line'>        <span class="n">cr</span><span class="o">.</span><span class="n">stroke</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>

</div>


<p>当python解释器遇到with语句时，执行步骤如下：</p>

<ol>
<li>with语句调用saved，当然saved又调用工厂函数，传入一个cairo context&mdash;cr作为唯一参数；</li>
<li>工厂函数把cairo context传入生成器函数，创建一个生成器generator；</li>
<li>generator被传入GeneratorContextManager；</li>
<li>with语句将GeneratorContextManager保存在一个临时的，隐藏的变量中（事实上with只保存<strong>exit</strong>方法）；</li>
<li>with语句在GeneratorContextManager对象上调用<strong>exit</strong>；</li>
<li><strong>enter</strong>在generator上调用next；</li>
<li>生成器函数（在def saved(cr)下面的代码块）运行直到yield表达式。这在cairo context上调用save；</li>
<li>yield表达式产生cairo context，cairo context变成在迭代器上调用next的返回值；</li>
<li><strong>enter</strong>方法返回cairo context，但是我们没有声明“as”，所以cairo context没有被保存下来；</li>
<li>嵌套的代码块被执行。这将设置旋转以及画一个矩形；</li>
<li>在嵌套的代码块的底部，with语句在GeneratorContextManager上调用<strong>exit</strong>方法；</li>
<li><strong>exit</strong>方法在迭代器上调用next(期待一个StopIterration异常发生);</li>
<li>生成器在yield之后恢复执行，这在cairo context上调用restore；</li>
<li>生成器返回，抛出一个StopIteration异常（就像期待的一样）;</li>
<li><strong>exit</strong>捕获这个异常，正常返回。</li>
</ol>


<p>这样我们就成功地将这个生成器函数当成with语句的context manager。为了正确地处理异常，我们还需要改善一下生成器函数。</p>

<h3>处理异常</h3>

<p>现在我们还是假设把错误的参数传入rectangle函数，下面是出现的情况：</p>

<ol>
<li>rectangle函数抛出一个TypeError异常；</li>
<li>with语句捕获这个异常；</li>
<li>with语句在GeneratorContextManager对象上调用<strong>exit</strong>，把关于异常的信息(type, value, traceback)传入；</li>
<li><strong>exit</strong>在迭代器上调用throw，传入相同的三个参数；</li>
<li>TypeError异常在生成器函数的上下文中被抛出，在yield表达式那一行。</li>
</ol>


<p>现在的生成器函数还有一个问题;restore不会在cairo context上被调用。因为yield表达式抛出一个异常，所以剩下的语句不会被执行。我们必须在yield周围加入一个try／finally块让生成器函数更加健壮：</p>

<div>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nd">@contextmanager</span>
</span><span class='line'><span class="k">def</span> <span class="nf">saved</span><span class="p">(</span><span class="n">cr</span><span class="p">):</span>
</span><span class='line'>    <span class="n">cr</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="k">yield</span> <span class="n">cr</span>
</span><span class='line'>    <span class="k">finally</span><span class="p">:</span>
</span><span class='line'>        <span class="n">cr</span><span class="o">.</span><span class="n">restore</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>

</div>


<ol>
<li>在生成器中，finally块执行。这会在cairo context上调用restore；</li>
<li>TypeError不被生成器处理，所以它在<strong>exit</strong>方法中重新被抛出；</li>
<li><strong>exit</strong>捕获TypeError；</li>
<li><strong>exit</strong>得知捕获的异常和传入的异常是一样的，结果返回None；</li>
<li>with语句检查返回值是否是真，因为不是，所以重新抛出TypeError异常，现在这个异常将在外层代码中被捕获。</li>
</ol>


<h3>总结</h3>

<blockquote><p>如果你像我一样很难完全理解with语句&mdash;尤其你对生成器感兴趣&mdash;不要灰心。这非常复杂，掺杂了python语言的很多特性，一些特性还是刚刚加入到python标准。</p></blockquote>

<p>参考链接：<a href="http://preshing.com/20110920/the-python-with-statement-by-example/" target="_blank"><a href="http://preshing.com/20110920/the-python-with-statement-by-example/">http://preshing.com/20110920/the-python-with-statement-by-example/</a></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[博客样式初步确定]]></title>
    <link href="http://gaoliying.github.io/blog/2014/05/10/the-entire-blog-is-almost-done/"/>
    <updated>2014-05-10T10:56:23+08:00</updated>
    <id>http://gaoliying.github.io/blog/2014/05/10/the-entire-blog-is-almost-done</id>
    <content type="html"><![CDATA[<h3>告一段落</h3>

<p>经过两天的设计和调试，博客的外观就变成大家现在看到的样子。外观主体给人的感觉是暗色调的，我看过太多其他人博客是白底黑字，这样虽然给人一种简约的感觉，但是比较单调。所以我决定给自己的博客融入黑色元素。</p>

<!-- more -->


<p>同时博客的超链接颜色是墨绿色的，而不是千篇一律的蓝色或黑色。背景图片是从网上下载来的灰黑相间的格子，链接稍后我会给出来。博客的logo(也就是我的名字那三个字)不再使用系统的中文字体，而是立夏手写体，这样子logo就不会给人一种刻板的感觉。下面是一些资源链接：</p>

<p><a href="http://subtlepatterns.com/">网页背景素材</a></p>

<p><a href="http://font.chinaz.com/">字体素材</a></p>

<p>博客的主体内容包裹在一层灰色半透明的区域内。每篇博客后面还增加了社会化分享组件，可以使访客方便的分享感兴趣的内容到微薄，微信等平台。最后我还增加了多说评论组件，实现博客留言的功能，而我可以在多说提供的后台管理界面上管理评论内容，非常方便。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的第一篇markdown文章]]></title>
    <link href="http://gaoliying.github.io/blog/2014/05/08/first-acticle-in-octopress/"/>
    <updated>2014-05-08T09:57:37+08:00</updated>
    <id>http://gaoliying.github.io/blog/2014/05/08/first-acticle-in-octopress</id>
    <content type="html"><![CDATA[<p><em>这是我的第一篇测试文章，求给力。</em></p>

<h3>我的第一个个人博客</h3>

<p>蛮久之前，我就想搭建一个自己的技术博客，由于当时水平有限，所以这个想法就搁浅了。到目前为止，我已经基本掌握了前端的知识，是时候实现当初那个想法了。对于我这种对后台开发还不是很了解的情况下，Github Pages无疑是最优选择。之后我就开始学习jekyll以及octopress框架。到现在，我终于在本地和github上搭建好了octopress环境，也知道怎么部署了，很兴奋。</p>

<!--more-->


<p>jekyll和octopress的学习过程颇费周折，最终依靠官方文档和搜索引擎，问题都一一解决了。以下是官方文档：</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;<em> <a href="http://jekyllrb.com/docs/home/" title="jekyll">jekyll</a>
&nbsp;&nbsp;&nbsp;&nbsp;</em> <a href="http://octopress.org/" title="octopress">octopress</a></p>

<p>现在我感觉我最迫切的任务是赶紧熟悉octopress框架和掌握markdown标记语言。octopress的默认主题我觉得不够优雅，之后我会下载一些主题，或许条件允许的话我会自己customize。markdown语言比较简单，附上学习地址：</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;<em> <a href="http://wowubuntu.com/markdown/">markdown语法说明</a>
&nbsp;&nbsp;&nbsp;&nbsp;</em> <a href="http://jianshu.io/p/q81RER">献给写作者的markdown新手指南</a></p>

<p>今天晚些时候我打算翻译一篇技术文章，Let&rsquo;s move!!!</p>
]]></content>
  </entry>
  
</feed>
